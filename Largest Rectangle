#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

// Complete the largestRectangle function below.
long largestRectangle(vector<int> h) {
int i,j,count,min;
long int Area,Max=0;
int n=h.size();
h[n]=0;            //to avoid crash while executing h[n]
for(i=0;i<n;i++){
  count=1;        
  min=h[i];
  j=i-1;
  while(j>=0){    //Loop to check for greater no.s in reverse dir.
    if(h[j]>min){      
      count++;
      j--;
    }
    else 
    break;
  }
  while(h[i+1]==min&&i+1<n){  
    i++;        //Loop to check for similar no.s (forward)
    count++;
  }  
  j=i+1;
  while(h[j]>=min&&j<n){    
    j++;        //Loop to check for greater no.s (forward)
    count++;
  }
  Area=min*count;
  if(Area>Max)
    Max=Area;
}
return Max;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    string h_temp_temp;
    getline(cin, h_temp_temp);

    vector<string> h_temp = split_string(h_temp_temp);

    vector<int> h(n);

    for (int i = 0; i < n; i++) {
        int h_item = stoi(h_temp[i]);

        h[i] = h_item;
    }

    long result = largestRectangle(h);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
