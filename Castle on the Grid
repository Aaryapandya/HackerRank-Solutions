#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

bool isInside(int nx, int ny, vector<string> &grid) {
    return (nx >= 0 && nx < grid.size() && ny >= 0 && ny < grid.size());
}

// Complete the minimumMoves function below.
int minimumMoves(vector<string> grid, int startX, int startY, int goalX, int goalY) {
    queue<pair<int, int>> q;
    pair<int, int> start = make_pair(startX, startY), end = make_pair(goalX, goalY);
    pair<int, int> dirs[4] = { {0, 1}, {0, -1}, {1, 0}, {-1, 0} };
    vector<vector<int>> minMove(grid.size(), vector<int>(grid.size(), 0));
    q.push(start);
    minMove[start.first][start.second] = 1;
    while (!q.empty()) {
        pair<int, int> cur = q.front();
        q.pop();
        for (int i = 0; i < 4; i++) {
            for (int range = 1; range < grid.size(); range++) {
                int nx = (dirs[i].first * range) + cur.first;
                int ny = (dirs[i].second * range) + cur.second;
                if ((isInside(nx, ny, grid) && grid[nx][ny] == 'X') || !isInside(nx, ny, grid)) {
                    break; // Pass Next Direction
                }
                if (!minMove[nx][ny]) {
                    if (nx == end.first && ny == end.second) {
                        return minMove[cur.first][cur.second];
                    }
                    q.push({nx, ny});
                    minMove[nx][ny] = minMove[cur.first][cur.second] + 1;
                }
            }
        }
    }
    return -1;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    int n;
    cin >> n;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    vector<string> grid(n);

    for (int i = 0; i < n; i++) {
        string grid_item;
        getline(cin, grid_item);

        grid[i] = grid_item;
    }

    string startXStartY_temp;
    getline(cin, startXStartY_temp);

    vector<string> startXStartY = split_string(startXStartY_temp);

    int startX = stoi(startXStartY[0]);

    int startY = stoi(startXStartY[1]);

    int goalX = stoi(startXStartY[2]);

    int goalY = stoi(startXStartY[3]);

    int result = minimumMoves(grid, startX, startY, goalX, goalY);

    fout << result << "\n";

    fout.close();

    return 0;
}

vector<string> split_string(string input_string) {
    string::iterator new_end = unique(input_string.begin(), input_string.end(), [] (const char &x, const char &y) {
        return x == y and x == ' ';
    });

    input_string.erase(new_end, input_string.end());

    while (input_string[input_string.length() - 1] == ' ') {
        input_string.pop_back();
    }

    vector<string> splits;
    char delimiter = ' ';

    size_t i = 0;
    size_t pos = input_string.find(delimiter);

    while (pos != string::npos) {
        splits.push_back(input_string.substr(i, pos - i));

        i = pos + 1;
        pos = input_string.find(delimiter, i);
    }

    splits.push_back(input_string.substr(i, min(pos, input_string.length()) - i + 1));

    return splits;
}
